{
  "hello": "Olá, eu sou o Victor",
  "home-text-1": "Sou um desenvolvedor full stack especializado em geotecnologias. Tenho ampla experiência com as principais ferramentas de desenvolvimento frontend como React, Angular, TypeScript e Next.js. Também sou proficiente em bibliotecas de mapas como Mapbox, OpenLayers e Leaflet, e já trabalhei com uma variedade de frameworks de backend, incluindo Spring, Play Framework, Django, Express.js e Nest.js.",
  "home-text-2": "Me formei em Engenharia de Agrimensura e Cartográfica na Universidade Federal de Viçosa, tenho um Mestrado em Engenharia Civil com foco em Informações Espaciais, e atualmente estou cursando um doutorado em Engenharia Civil, também com foco em Informações Espaciais.",
  "home-text-3": "Atualmente, estou trabalhando como analista de requisitos em uma empresa de engenharia cartográfica no Brasil, mas estou aberto a oportunidades de freelance tanto no Brasil quanto no exterior.",
  "check-out-projects": "Confira meus últimos projetos",
  "project-dragonfly-title": "Libélula",
  "project-dragonfly-description": "Libelula é uma plataforma de geointeligência focada no combate a arboviroses endêmicas do Brasil, como dengue, Zika e chikungunya.",
  "project-geoportal-itabirito-title": "Geoportal Itabirito",
  "project-geoportal-itabirito-description": "O Geoportal Itabirito é uma plataforma inovadora que consolida dados do Cadastro Territorial Multifinalitário do município de Itabirito.",
  "showcase": "Demonstração",
  "links": "Links",
  "go-back": "Voltar",
  "project-dragonfly": "Libélula",
  "project-dragonfly-intro": "Na cultura popular, as libélulas são conhecidas por se alimentarem de larvas de mosquito que transmitem arboviroses. Inspirada nesse conceito, a Libelula Geoanalytics é uma plataforma desenvolvida para ajudar os municípios a combater arboviroses mapeando locais de surtos e casos de doenças através de imagens aéreas capturadas por drones. Isso permite o monitoramento em tempo real de estatísticas e análises sobre a progressão dessas doenças.",
  "project-dragonfly-dev": "Libelula foi desenvolvida como um ecossistema: possui um frontend em React, dois backends — um para provisionamento de dados usando Express.js e outro para autenticação OAuth usando Django REST Framework — além de componentes adicionais como um servidor pg_tileserv e um banco de dados PostGIS para fornecer tiles em formato MVT.",
  "project-dragonfly-frontend": "No frontend, utilizei a biblioteca react-map-gl para renderização de mapas com Mapbox e a biblioteca Highcharts para renderização de gráficos. Os componentes da UI foram gerenciados pelo Chakra UI, e toda a interface foi projetada em modo escuro para dar ao sistema um visual moderno.",
  "project-dragonfly-backend": "Para o backend, escolhi a combinação de Express.js e Prisma para implementar uma API de dados com tipagem forte e velocidade de desenvolvimento rápida. Para a API de gerenciamento de autenticação, usei o Django REST Framework junto com o Django OAuth Toolkit para acelerar a implantação de um sistema de autenticação de usuários de ponta.",
  "project-dragonfly-mobile": "Libelula Geoanalytics também inclui um módulo móvel, desenvolvido como um projeto separado.",
  "project-dragonfly-contract": "Neste projeto, fui contratado por uma empresa de engenharia brasileira para desenvolver todos os aspectos relacionados à plataforma: o design, desenvolvimento, metodologia de coleta de dados e implantação na nuvem.",
  "project-dragonfly-deployment": "Atualmente, a plataforma está implantada em vários municípios com um pipeline GitOps em todo o ecossistema, atualizando aplicativos e infraestrutura usando o conceito de Infrastructure as Code. Todas as aplicações são conteinerizadas e implantadas no Docker Swarm com Portainer.",
  "project-geoserver-title": "Cliente móvel para o Geoserver",
  "project-geoserver-intro": "O Cliente Móvel Geoserver é um aplicativo desenvolvido em Ionic, React, TypeScript e OpenLayers que atua como um cliente móvel para o Geoserver. A proposta surgiu para atender usuários que já utilizam um sistema web para manipular camadas geográficas, mas precisavam de uma solução móvel para baixar dados, visualizá-los offline, acessar camadas, editar feições e adicionar novas informações diretamente do dispositivo.",
  "project-geoserver-dev": "A escolha da stack de tecnologias, como Ionic e React, foi motivada pela flexibilidade e pelo vasto ecossistema de ferramentas para mapas que o OpenLayers oferece, permitindo renderizações eficientes de camadas vetoriais e raster, além de funcionalidades para desenho de feições complexas.",
  "project-geoserver-frontend": "O frontend foi desenvolvido com Ionic e React, com o uso do OpenLayers para manipulação de dados geográficos e renderização de mapas. As interfaces foram construídas de forma responsiva, permitindo uma navegação intuitiva e eficiente no dispositivo móvel.",
  "project-geoserver-backend": "O Geoserver foi o único backend do projeto, tirando proveito de suas APIs REST para gerenciar configurações de workspaces, stores, layers, usuários e estilos, eliminando a necessidade de criar um backend adicional.",
  "project-geoserver-mobile": "O aplicativo foi desenvolvido para dispositivos móveis com suporte completo para interação offline, permitindo que os usuários baixem dados, acessem camadas geográficas e editem feições diretamente no app.",
  "project-geoserver-contract": "Este projeto foi desenvolvido dentro da empresa onde trabalho e levou 3 semanas para ser concluído, desde a elicitação de requisitos até a publicação do aplicativo na Google Play.",
  "project-geoserver-deployment": "A publicação do aplicativo foi realizada via Ionic Appflow, com distribuição em modo não listado na Google Play, acessível apenas para os usuários autorizados pelo cliente.",
  "project-geoserver-description": "Este cliente móvel para o Geoserver permite que os usuários acessem camadas geográficas no dispositivo móvel, com suporte para download de feições para uso offline, coleta de dados em campo e exportação em formato GeoJSON.",
  "skyforest-title": "Automatizando o Processamento e a Entrega de Dados Geoespaciais para a Skyforest",
  "skyforest-intro": "A Skyforest precisava de uma forma eficiente para processar e distribuir grandes volumes de imagens de drones e dados florestais através do GeoServer. O fluxo manual exigia mosaicar imagens, gerar pirâmides, configurar o GeoServer, gerenciar usuários e enviar credenciais aos clientes.",
  "skyforest-solution": "Para otimizar esse processo, desenvolvi um sistema baseado em eventos usando Node.js, que automatizou toda a pipeline. Um serviço de monitoramento integrado ao Redis detectava mudanças nos arquivos comparando hashes, garantindo que apenas novos ou modificados fossem processados. Pipelines com GDAL realizavam compressão e geração de pirâmides, otimizando os arquivos para distribuição na web. Configurações no GeoServer, como workspaces, stores, camadas e permissões de usuário, eram criadas dinamicamente. Um mecanismo de fila no Redis gerenciava as tarefas de processamento, evitando sobrecarga de memória.",
  "skyforest-interface": "Para melhorar a experiência dos clientes, desenvolvi uma interface web onde os usuários podiam fazer login, acessar seus dados e obter documentação sem precisar de suporte técnico.",
  "skyforest-impact": "O sistema reduziu significativamente o esforço manual, melhorou a performance ao otimizar o processamento dos dados e escalou de forma eficiente conforme os volumes aumentaram. Os clientes da Skyforest passaram a acessar seus dados diretamente, com mínimo atrito.",
  "skyforest-conclusion": "Esse projeto me permitiu integrar desenvolvimento frontend e backend, combinando pipelines com GDAL, automação com Redis e configuração do GeoServer em um sistema de entrega de dados eficiente.",
  "skyforest-technologies": "Tecnologias utilizadas: Node.js, Redis, GDAL, GeoServer e um servidor geoespacial baseado em Linux."
}

